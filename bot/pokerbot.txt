Схема покербота:
   — интерфейс пользователя
   — блок принятия решения
   — блок сбора статистики

должно быть десять функций по определению комбинации:

isHighCard, isOnePair, isTwoPair, isSet, isStraight, isFlush, isFullHouse, isQuads, isStraightFlush, isRoyalFlush.



=============================================================

K = (suit , rank)

Проверку на флеш делаем очень быструю
Флеш - это когда K1(0) == K2(0) == K3(0) == K4(0) == K5(0)

Поверки по рангам
1. Делаем пустой масив номиналов S размером в 13 элементов: от 0(двойка) до 12 (туз)
2. Инициализируем его нулями - это счётчики 
3. Для каждой карты K увеличиваем счётчик соответствующего номинала
4. Далее сортируем массив S (счётчиков номинала по возрастанию) и проверяем результат:
      1. если первый равен 4 - "каре".
      2. если первый элемент равен 3:
         2а. если второй элемент равен 2 - "фул".
         2б. если второй элемент равен 0 или 1 - "тройка"
     3. если первый элемент равен 2:
         3а. если второй элемент равен 2 - "две пары".
         3б. если второй элемент равен 0 или 1 - "пара"

как подсчитывать страйт?

проверку на стрит можно делать уже после определения всех остальных комбинаций. Стрит получится, только если нет даже пары. Ведь все карты должны быть _разные по номиналу.

Пусть будет массив S. Не сортируя его я могу задать поиск первого элемента, содержащего единицу
i=Array.IndexOf(S,1)
a затем рассматривать следующие варианты
i<0
элементов содержащих единицу нет, значит неповторяющихся номиналов нет. Это возможно только в случае 3+2 - значит Full House
i=0
Самый первый элемент массива имеет значение 1. Значит у нас в руке один Ace. Проверяем на наличие straight
Если А2345, что выражается как S(0)=S(1)=S(2)=S(3)=S(4) или 10JQKA, что выражается как S(0)=S(9)=S(10)=S(11)=S(12), то у нас straght, в противном случае сортируем массив и проверяем совпадение номиналов (на full house уже проверять не надо).
i<=8
Проверяем на наличие straight снова таким образом. Если S(i)=S(i+1)=S(i+2)=S(i+3)=S(i+4), то у нас straight. В противном случае сортируем массив и проверяем совпадение номиналов.
i>8
В этом случае straight уже быть не может, т.к. 9й элемент массива - десятка. Просто сортируем массив и проверяем совпадение номиналов.          


проблему подсчета совпадений номиналов он решил так:

For i = 0 to 4
 For j = 0 to 4
   If hand(i).face = hand(j).face AndAlso i <> j
     matches += 1
   End If
 Next j
Next i

hand(i).face - берется из структуры данных (колоды)

этот кусок кода определит только то, что на руке есть что-то "не меньше пары", а вот что именно?

счетчиков д.б. не два, а массив счетчиков (по кол-ву номиналов)
тогда достигаем нужной гибкости:

For i = 0 to 4
  For j = 0 to 4
    If hand(i).face = hand(j).face And i <> j then
      matches(face) += 1
    End If
  Next j
Next i

соответственно затем:

For i = 0 to maxfaces
  if matches(i) = 2
    pairs += 1
  elseif matches(i) = 3
    threes += 1
  elseif matches(i) = 4
    kare += 1
  endif
Next i

это будет работать при любом кол-ве карт в руке, т.е. покажет все пары, тройки и каре.

>>> слишком много переменных вводится, тогда уж лучше массив...

=============================================================

Как по вашему лучше устроить перебор всех пятикарточных комбинаций?
У меня была мысль завернуть это дело в 5 циклов, но тогда встает проблема дубликатов, т.е. получается, что учитывается порядок карт. Как от этого можно избавиться?

Можно не избавляться, а рассмотреть 52!/47! вариантов, что будет дольше в 5! = 120 раз.

Я решил, что делать в 120 раз больше рассчетов - неэфективно, поэтому пошел вторым путем. В итоге получился пятиэтажный цыкл. Но отрабатывает за доли секунды.

Теперь буду искать и придумывать алгоритмы для оценки силы комбинации. Для начала - не буду учитывать кикеры, ограничиваясь просто типом комбинации (топ-карта, пара, две пары, сет, стрит, флеш, фул хаус, карэ, стрит-флеш. Всего 9 вариантов результата).

Сразу приходит на ум посчитать промежуточные значения - количества карт одной масти, одного достоинства. Дальше - делать выводы на основании этих значений.

=============================================================

Если взять ривер, то есть на столе лежат все пять карт, возможных комбинаций: 1 (без карманных карт) + 5*2 (с одной карманной картой) + 10 (с двумя карманными картами) = 21

если взять ситуацию, когда на столе лежат 4 карты из 5ти и нам известны 2 наших карманных карты, чтобы определить наши шансы на победу, нам перебором нужно будет проверить много комбинаций. В такой ситуации оптимальнее определить старшую комбинацию и соответственно карты, которые помогут младшей руке и не усилят старшую руку до натса.  уже становится сложнее, не говоря уже про подсчеты шансов одной руки против другой, когда на столе нет ни одной карты, то есть префлоп

у тебя есть 7 карт, опиши алгоритм, как ты определишь, что у тебя стрит?

1. Сортировка по возрастанию номинала.
2. перебор с сравнением с предыдущей картой.
3.Если разница с предыдущей больше 1 номинала - значит не стрит. Если дошли до конца без прерывания - значит стрит

пример руки где твой алгоритм не работает 245678A

Это частный случай. Можно исключить его предварительным поиском туза и двойки. Если есть - то тузу присваивается низший приоритет

A2TJKQ

Ставишь счетчик сколько карт прошло подряд, если следующая не попорядку скидываешь в 0. Если после пребеора счетик = 5 или выше- значит стрит. +  если с низким тузом не достигая 5 вышел сброс счетчика, то тузу возвращается высший приоритет

туза "делим" на две карты с номиналом 1 и 14 соответственно (для стрита). тока непонятно зачем тебе это? без размеров стэков, банка, нет смысла считать шансы

делаем два словаря: в одном ключами являются ранги карт, в другом - их масти, а в качестве значений - количество вхождений. по размерам словарей уже можно будет сделать определенные выводы, анализировать их или отбрасывать

===================================

делал код расчёта вероятностей в холдеме. делал просто - проверял пару тысяч случайных партий и смотрел результаты. результат довольно-таки правильный получается, а время расчёта мало. Самые первые покерные боты так и делали. В принципе, для префлопа наверняка будет достаточно.

по идее достаточно найти самую сильную руку, а для этого не обязательно сравнивать все-со-всеми. если это игрок то он победил, иначе - проиграл

В холдеме семикарточные руки. Т.е. из 7 карт выбираются 5 карт так, чтобы комбинация была максимальной. 

да, именно это и делал. 2 карты на столе, в руку по одной добавляют до 5, перемежая ставками


-------

Нам необходимо узнать вероятность того что после вскрытия противник окажется сильнее...

Итак есть набор комбинаций разной силы... (разные стриты суть разные комбинации)

Нам известно от 5 до 7 наших карт и от 3 до 5 карт соперника и надо знать вероятность того, что при вскрытии комбинация соперника окажется сильнее/слабее (я не учитываю вариант равносильных комбинаций когда вступают нетривиальные правила -- такое маловероятно и этим вполне можно пренебречь).

Во первых необходимо изучить полную вероятность того что в 7 картах окажется комбинация и понять как те или иные открытые карты влияют на эту вероятность... (при этом набор открытых карт можно считать упорядочеными == допустим в руке карты 1 и 2, на столе 3,4,5,6,7)

Например рассмотрим тузовую четверку...

Полная вероятность (дай бог не ошибусь-- сколько там карт то? ну пусть будет 50)

Всего есть столько вариантов расклада которые нас устраивают: (4*3*2*1) * (46*45*44) * (5*5*5) = С
(выбираем в какой последовательности идут тузы, потом оставшиеся 3 карты и то между какими тузами будут каждая из них) в итоге получаем вероятность данной комбинации С/n где n=50*49*...*44 - всего комбинаций (упорядоченых).

Теперь по-очереди рассматриваем известные карты...

Допустим первая карта у нас не туз... Тогда C становится = (4*3*2*1) * (45*44) * (5*5)    (то есть теперь точно знаем какой у нас не туз и где он лежит)
Соответственно если туз, то С= (3*2*1) * (46*45*44) * (4*4*4) и вероятность четверки -- С/n причем n теперь 49*48*..*44 (одну карту уже знаем)....

....Итак, проанализировав вероятность каждой комбинации для себя и для соперника (думаю вполне понятно как) предстоит последний шаг: Оценить вероятность победы...

Тут все просто.

Итак допустим мы знаем что с вероятностью x0 мы получим кукиш с маслом - в таком случае противнику достаточно выкинуть хоть что-то содержательное - это равно сумме вероятностей для каждой комбинации (не тупая сумма, а надо учеть что вероятность выпадения четверки уже включает в себя уже посчитаную вероятность выпадения тройки... считаю что это надо вкладывать в рассчет С для таких комбинаций и считать что появление, например, четвертого туза убивает комбинацию "тузовая тройка", которая просто неприемле наличия четырех тузов). Так вот -- допустим что при кукише в x0 случаев противник с вероятностью X0 выигрывает.... Тогда вероятнность события "противник выиграл при том что у нас кукиш" равна x0*X0... Аналогично оценивается вероятность выигрыша противника для каждой нашей возможной комбинации (вполне понятным образом)... Сумма таких вероятностей и есть полная вероятность выиграша....

А еще можно попробовать тоже самое но для неупорядоченых наборов карт... Быть может первая часть получится проще...

----------------

Можем сравнивать свою руку со всеми наиболее вероятными руками противника.

Всех возможных комбинаций рук (по силе) чуть меньше 8-ми тысяч. Нужно подумать насколько будет просто расчитать вероятность каждой

достаточно много игроков в покер просто оперируют вероятностями ( т.е. , например - вероятность того , что у соперника при известных своих 2 картах + 5 картах флопа стрит примерно 20%. у меня пара тузов , а во флопе ничего , кроме недострита . А дальше всё зависит от степени агрессивности нашей игры - увеличить ставку  или , например , вообще уйти из этой раздачи. Опять-же соперник может блефануть , а мы можем испугаться , ну и конечно с точностью до наоборот).

А по поводу психологии - это да , если ты садишься в казино против дилера играть , то тут никакой психологии, т.к. дилеру по барабану - он автоматом работает: раздать всем по 2 карты включая себя -> подождать решения игроков - > вскрыть свои карты -> сравнить свою руку с рукой игрока и либо оплатить в зависимости от комбинации , либо забрать ante и bet. Но если играть с соперником , то это совсем другое дело - как можно оценить математически такую ситуацию - в руке пара дам , во флопе три валета + ну и там ещё 3 и 4, к примеру, и соперник ставит максимальную ставку. И тут уже можно понервничать - вдруг у него каре на валетах ? А может фул-хаус , но младше ? А если каре , то в деньгах теряешь очень много? Вот тут уже включаются психология и опыт анализировать предыдущие действия соперника.

Для таких игр как покер можно теоретически расчитать вероятности действий (fold, call, raise) в любой ситуации. Т.е. в каждой конкретной ситуации нет единствненно правильного решения. Нужно их чередовать с определенной частотой. Но найти теоретическое решение жутко сложно. Нам остается лишь приближаться к нему. Люди это делают с помощбю психологии. У машин может быть другой путь.

---

Для игры в блэк джек существует базовая стратегия, т.е. стратегия, при игре в которую человек минимизирует свой проигрыш в казино. НО - казино не борется с людьми, которые играют по базе. Вот только когда человек начинает считать карты, тогда да - человеку в блэк джек запрещают играть. Это я к тому , что оптимальная стратегия не всегда даёт положительный результат. Иногда уверенность в том , что вот она - система мечты, которая должна грести деньги лопатой, может сыграть очень плохую роль.

В игре 6 колод - они перед игрой тасуются, затем специальной пластиковой картой делят эту большую колоду на 2 . Просто втыкают её где-то в районе 1/3 от конца большой колоды и всю эту конструкцию пихают в башмак. Игра идёт до выхода этой пластиковой карты (красной) . В колоде одинаковое количество считаемых больших и малых карт. Мы считаем дисбалланс больших и малых карт. Т.е. если у нас выходит много мелких , то счёт растёт , если выходит много крупных , то падает. В случае, когда реальный счёт (это текущий делённый на оставшееся кол-во колод в  башмаке) становится равным 3 или больше, то вероятность начала выхода крупных карт достаточно высока (какая - сказать не могу - не знаю ). На это и играют. А после выхода красной карты всё опять перемешивается. Ах , да - отыгранные карты в колоду по ходу текущего шафла не возвращаются, они возвращаются только после выхода красной карты (т.е примерно 4 колоды разыгрываются).

Казино вообще никакой информацией не пользуется
- тупо набираются карты до 17 очков,
- 17-21 - останавливается, сравниваются очки и
     если у игрока больше , то платит 1:1 иначе забирает,
- если нет 17 - берёт карту
22 - перебор - всем оплачивается ставка 1:1 (или 3:2 для BlackJack)

-------


Монте-Карло может помочь посчитать вероятность раскладов. Но как он может помочь делать правильные заявки? Не надо забывать что кроме Выложенных карт - информацию о ситуации в партии дают заявки соперников, а своими заявками мы предоставляем информацию соперникам. Тех, кто приспосабливается к стилю соперника, можно ловить на этом - тотальным и резким переключением на другой стиль. Когда соперник заметит, что мы играем совсем иначе - мы переключимся на еще более другой :)

игра:
два игрока, каждый берет взакрытую по одной карте (из колоды в 52 карты).
В результате открытия выигрывает сильнейшая по номиналу карта (всего 13 номиналов) - выигрывает большую ставку.
Если игрок пасует - то он проигрывает малую ставку.
Первой заявкой SB может либо ставка либо полблайнда (уравнивает с BB).
После этого у игроков возможность только либо спасовать либо сравнять. Сказать "Ставка" за торговлю может только один игрок, и только один раз.
После ответа "чек" на "уравнивание блайнда" первым игроком, либо если номиналы карт после открытия одинаковы - партия переигрывается (право сдачи переходит ко второму игроку)

для техасского холдема никакого толкового AI не написать в принципе. Оперировать ведь приходится только своими картами, плюс "общими" - а их всего 2 вначале и 7 в конце - какие бы предположения мы ни делали, мы ничего не сможем сказать о том, что у противников во взятке. Единственные данные у нас - их поведение, то есть, делает противник check, bet, или повышает ставку, и насколько. Пасующий нас уже не интересует - все что из него можно выжать, так это то, что у него нет "парирующих карт", но это увеличивает вероятность выпадения этих карт следующим пиком на довольно незначительную величину. Разве что игра идет против 20 противников, а пасуют сразу 19 :). Приходится оперировать настолько недостоверной информацией, что гораздо большее значение имеет расклад, чем все твои выкладки :). Я пробовал играть в холдем с компом. Вся стратегия сводится к пасованию, когда противник делает большие ставки, а у тебя нет ничего интересного, игре наудачу, когда у тебя неполный флеш или стрит, и пробиванию большими ставками когда вначале приходит пара. 

Вот что нужно:
1) на префлопе у нас две карты. Надо узнать их "вес", и может быть лучше это все скинуть. 
2) На флопе получается 5-ти карточная комбинация. Надо просчитать что выпало или что может выпасть если придут еще две карты и какой процент вероятности что это выпадет. Надо узнать какие комбинации с этими картами могут выпасть у соперников. Может быть и играть не стоит.


1. у тебя только считаются вероятности, но нет стратегии
2. в твоем подсчете не учитываются действия игроков (заявки)
Например для упрощенного варианта с одним циклом торговли есть сведение к модификации задачи матричных игр, и соответственно методы получения вероятностной оптимальной стратегии (методами линейного программирования) - то есть есть алгоритм четкого и полного решения. Есно алгоритм учитывает всё - и предшедствующие заявки, и информацию о своей карте (картах).

нет проблем с написанием простейших Ботов (определением возможных действий). так как условия на действия элементарны - пока нет ставки возможен чек, если весь круг прочекал, то торговля завершена, повышение/ставка возможны не более четырех раз за круг торговли, посленим делает заявку игрок перед последним поднявшим/поставившим ставку, две первые ставки (в темную) ставкой/повышением не считаются. 

Да, посчитать вероятность это лишь малая часть дела. И поможет только чтоб бот совсем не тупил.

объясни что ты подразумеваешь под "перебором". Перебираем возможные действия игроков (fold, check, call, bet, raise). Что в результате такого перебора мы получим? И каким образом?


псевдокод:

Eval(Var OF[КоличествоСоперников])
//
Searсh(Соперник;Depth;Var OF[КоличествоСоперников])
Var OF1[КоличествоСоперников];
if Depth=0 then Eval(OF)
Else
OC:=-inf;
ЛучшееДействие:=0;
Для Каждого действия (Заявки)
  ВыполнитьДействие;
  Search(?(Соперник=КоличествоСоперников,1,Соперник+1),Depth-1,OF1);
  if OF1[Соперник]>OC Then
      ЛучшееДействие:=ТекущееДействие;
      OC:=OF1[Соперник];
      OF:=OF1; // передача на уровень вниз
  Endif;
КонецЦикла;
Endif;

Вот перебор на торговлю... (Это если у нас есть решение в чистых стратегиях) То есть для игр на несколько соперников с полной информацией, где каждый пытается максимизировать свою оценку. Не рассмотрен случай когда два (и более) хода дают одинаковую оценку. Есть другой вариант перебора - пессимистичный, это когда каждый соперник не максимизирует свой выигрыш, а минимизирует наш...

В твоем переборе упущен самый ключевой момент. Когда игра заканчивается еще при depth > 0. Как посчитать оценку не зная карт соперника?

Оценка считается методом монте-карло, причем неважно завершен перебор или нет.
(то есть кидаем случайным образом карты, и оцениваем ожидаемый выигрыш)
Осталось увязать монте-карло с заявками (и открытыми картами) в переборе и вероятностными стратегиями.
Четкой мат. модели на более чем 2 соперников в любом случае не существует, и программа выигрывающая слабому сопренику будет проигрывать сильному, и наоборот. То есть всё-таки нужны адаптивная модель!
Но в любом случае получается что лучше делать пессимистичекий вариант - в переборе все пытаются минимизировать оценку одной стороны, а эта сторона (за кого обдумываем) Пытается максимизировать свою оценку.


Да еще и в играх более чем двух соперников нет лучшего хода (не работает правило Цермело, нет лучшего хода и нет оптимальной стратегии), То есть игра математически несколько бессмысленна. :)

Ну не совсем. Можно рассматривать игру как 1 против всех, т.е. получается игра двух соперников. А т.к. в покере наши соперники не могут обмениваться информацией между собой (по крайней мере это запрещено) у них нет значимого преимущества. Также можно быть уверенным, что они ни о чем не договорились перед игрой.
Т.е. покер вполне можно рассматривать как игру двух противников, если очень хочется.

В покере мы не можем за какое-то реальное время посчитать вес игры :( Даже зная стратегии обоих игроков. И стратегии слишком велики (если все варианты всех четырех кругов торговли перевести в возможные стратегии - их становится слишком много) То есть мы можем посчитать вес игры только серией тестовых матчей.

---

Есть еще идея составлять стратегии не для каждой возможной комбинации карт, а для вероятностей выигрыша против средних карт. Т.о. в стратегии будет столько параметров сколько мы захотим. Чем больше параметров тем точнее будет учитываться вероятность выигрыша, но труднее будет оптимизировать матожидание.

Когда я только начал думать о боте для покера, сразу пришла идея просто торговаться в зависимости от вероятности выигрыша, т.е. иметь только один набор параметров. Например,

на префлопе открываемся или отвечаем когда

    МО * Параметр1 >= сумма ставки

на флопе:

    МО * Параметр2 / коэффициент агрессивности противников в предыдущей торговле >= сумма ставки

на торне:

    МО * Параметр3 / коефициент агрессивности противников в предыдущей торговле >= сумма ставки

на ривере:

    МО * Параметр4 / коефициент агрессивности противников в предыдущей торговле >= сумма ставки

И поднимать reraise, когда это соотношение превосходит какие-то заранее заданные коэфициенты. эту фишку можно получить автоматически, причем на порядки (на сколько позволят ресурсы компа) более правильно. Осталось только научится определять вероятности выигрыша против средних карт. Я думаю, что это решаемая задача.

Мы можем позволить перебор + Монте-Карло (случайные расклады), который при увеличении глубины перебора, и при увеличении количества случайных раскладов даст точное решение... При этом в ОФ если досчитались до конца - то присваиваем сам выигрыш, если нет - то ожидаемый... Если нам при этом нет надобности хранить все перебранные расклады - то хватает памяти, и значит мы можем написать программу которая при бесконечном времени на обдумывание дойдет до финальной позиции в переборе, а при увеличении количества попыток (испытаний) в Монте-Карло - даст точную оценку финальных позиций.

При этом ожидаемый выигрыш считается легко (если досчитались до конечной позиции) по Байесу. Для каждого расклада -

  Его вероятность изначально * Вероятность каждого хода (действия) в дереве перебора * Выигрыш в конечной позиции

(Для случая если перебрали все действия и все расклады) . А вот проблема - посчитать вероятность каждого хода (Дествия) которая зависит от ожидаемого выигрыша (чтоб её посчитать нужно построить дерево перебора), а Сам ожидаемый выигрыш (вес игры) считается через эту вероятность...


-------

играют 10 человек.

статистика побед:

Straight             29.2345
Two Pair             23.7132
Full House           15.1937
Flush                14.3733
Pair                  8.3290
Three Of A Kind       7.6079
Four Of A Kind        1.4532
Straight Flush        0.0627
Royal Flush           0.0326
High Card             0.0002

Еще статистика:

Pair                 44.00937
Two Pairs            23.50828
High Card            17.65895
Straight              6.87433
Flush                 3.03835
Full House            2.60682
Three Of A Kind       2.12946
Four Of A Kind        0.16525
Straight Flush        0.00672
Royal Flush           0.00277

Это процент выпадания рук.

----------------------------

Вот посчитал табличку матожидания выигрыша на префлопе. Все игроки (10) делают одну ставку перед раздачей. Больше не торгуются.
Сделал 128 млн. случайных раздач и посчитал какие карты сколько ставок в среднем выигрывают:

AAu - 3.027
KKu - 2.540
QQu - 2.174
AKs - 2.030
JJu - 1.899
AQs - 1.889
KQs - 1.825
AJs - 1.788
KJs - 1.732
ATs - 1.711
QJs - 1.698
TTu - 1.697
AKu - 1.681
KTs - 1.664
JTs - 1.642
QTs - 1.639
99u - 1.549
A9s - 1.521
AQu - 1.520
T9s - 1.483
KQu - 1.474
A8s - 1.465
K9s - 1.462
J9s - 1.451
88u - 1.447
A5s - 1.446
Q9s - 1.441
A4s - 1.420
A7s - 1.417
AJu - 1.399
A3s - 1.394
77u - 1.380
A6s - 1.374
KJu - 1.364
A2s - 1.358
T8s - 1.357
K8s - 1.347
QJu - 1.345
98s - 1.342
J8s - 1.320
ATu - 1.311
66u - 1.311
Q8s - 1.308
K7s - 1.303
JTu - 1.292
87s - 1.286
KTu - 1.285
QTu - 1.272
K6s - 1.264
55u - 1.262
97s - 1.256
K5s - 1.247
44u - 1.244
76s - 1.240
T7s - 1.236
33u - 1.234
22u - 1.230
K4s - 1.227
K3s - 1.209
J7s - 1.203
Q7s - 1.199
86s - 1.196
K2s - 1.195
54s - 1.191
65s - 1.187
75s - 1.167
Q6s - 1.163
Q5s - 1.150
96s - 1.144
Q4s - 1.130
T9u - 1.130
T6s - 1.119
Q3s - 1.117
64s - 1.110
53s - 1.108
85s - 1.103
Q2s - 1.102
A9u - 1.102
J6s - 1.097
J5s - 1.083
J9u - 1.079
J4s - 1.069
43s - 1.065
K9u - 1.064
74s - 1.063
Q9u - 1.054
J3s - 1.050
95s - 1.048
A8u - 1.038
J2s - 1.033
T5s - 1.033
T4s - 1.015
A5u - 1.013
52s - 1.009
63s - 1.008
84s - 1.001
T3s - 0.997
T8u - 0.990
A4u - 0.989
A7u - 0.988
98u - 0.987
42s - 0.987
T2s - 0.985
A3u - 0.961
73s - 0.959
94s - 0.956
32s - 0.944
93s - 0.939
J8u - 0.938
A6u - 0.938
87u - 0.934
K8u - 0.932
92s - 0.925
A2u - 0.923
Q8u - 0.914
83s - 0.910
62s - 0.907
82s - 0.895
97u - 0.894
76u - 0.893
K7u - 0.884
72s - 0.873
T7u - 0.862
54u - 0.845
65u - 0.841
K6u - 0.840
86u - 0.838
K5u - 0.822
J7u - 0.812
75u - 0.810
K4u - 0.799
Q7u - 0.795
K3u - 0.780
96u - 0.772
K2u - 0.764
53u - 0.759
64u - 0.755
Q6u - 0.754
85u - 0.739
Q5u - 0.737
T6u - 0.736
Q4u - 0.717
43u - 0.713
74u - 0.704
Q3u - 0.699
J6u - 0.698
Q2u - 0.683
J5u - 0.680
95u - 0.671
J4u - 0.660
52u - 0.653
63u - 0.649
T5u - 0.645
J3u - 0.643
42u - 0.629
J2u - 0.629
84u - 0.628
T4u - 0.623
T3u - 0.607
73u - 0.593
T2u - 0.590
32u - 0.584
94u - 0.574
93u - 0.554
62u - 0.540
92u - 0.538
83u - 0.534
82u - 0.514
72u - 0.500

Получилось похоже на правду. Кто-нибудь еще может сделать такое? Хочется проверить. 

Вот для игры двух игроков:

AAu - 1.697
KKu - 1.641
QQu - 1.592
JJu - 1.546
TTu - 1.499
99u - 1.440
88u - 1.384
AKs - 1.328
77u - 1.325
AQs - 1.312
AJs - 1.298
AKu - 1.295
ATs - 1.282
AQu - 1.277
66u - 1.268
AJu - 1.262
KQs - 1.260
A9s - 1.248
ATu - 1.245
KJs - 1.245
A8s - 1.231
KTs - 1.230
KQu - 1.221
A7s - 1.211
55u - 1.210
A9u - 1.207
KJu - 1.204
QJs - 1.201
K9s - 1.195
A5s - 1.191
A8u - 1.189
A6s - 1.189
KTu - 1.189
QTs - 1.186
A4s - 1.174
A7u - 1.168
K8s - 1.161
A3s - 1.158
QJu - 1.158
K9u - 1.151
JTs - 1.151
Q9s - 1.150
K7s - 1.146
A5u - 1.146
44u - 1.145
A6u - 1.145
A2s - 1.141
QTu - 1.141
A4u - 1.127
K6s - 1.127
Q8s - 1.120
J9s - 1.114
K8u - 1.114
K5s - 1.110
A3u - 1.110
Q9u - 1.104
JTu - 1.104
K7u - 1.098
K4s - 1.092
A2u - 1.091
T9s - 1.086
Q7s - 1.082
J8s - 1.081
33u - 1.080
K6u - 1.076
K3s - 1.075
Q6s - 1.069
Q8u - 1.068
J9u - 1.064
K5u - 1.061
K2s - 1.060
Q5s - 1.052
T8s - 1.050
J7s - 1.046
K4u - 1.042
Q4s - 1.035
T9u - 1.032
Q7u - 1.032
J8u - 1.029
K3u - 1.023
98s - 1.020
Q3s - 1.018
Q6u - 1.017
22u - 1.015
T7s - 1.015
J6s - 1.012
K2u - 1.005
Q2s - 1.001
J5s - 1.001
Q5u - 1.000
T8u - 0.996
J7u - 0.993
97s - 0.987
J4s - 0.983
T6s - 0.981
Q4u - 0.981
J3s - 0.966
98u - 0.966
87s - 0.965
Q3u - 0.963
T7u - 0.961
J6u - 0.957
96s - 0.950
J2s - 0.948
T5s - 0.947
J5u - 0.944
Q2u - 0.943
T4s - 0.933
86s - 0.931
97u - 0.930
J4u - 0.925
T6u - 0.922
95s - 0.918
T3s - 0.917
76s - 0.915
87u - 0.907
J3u - 0.905
T2s - 0.900
85s - 0.898
96u - 0.893
T5u - 0.888
J2u - 0.887
94s - 0.884
75s - 0.880
T4u - 0.874
93s - 0.869
65s - 0.869
86u - 0.869
84s - 0.861
95u - 0.858
T3u - 0.855
76u - 0.854
92s - 0.853
74s - 0.846
54s - 0.839
T2u - 0.836
85u - 0.836
64s - 0.834
83s - 0.825
94u - 0.818
75u - 0.817
82s - 0.811
73s - 0.808
65u - 0.806
93u - 0.805
53s - 0.803
63s - 0.797
84u - 0.795
92u - 0.786
43s - 0.783
74u - 0.779
54u - 0.771
72s - 0.771
64u - 0.767
52s - 0.767
62s - 0.761
83u - 0.756
42s - 0.745
82u - 0.742
73u - 0.739
53u - 0.735
63u - 0.730
32s - 0.727
43u - 0.713
72u - 0.700
52u - 0.694
62u - 0.690
42u - 0.673
32u - 0.656

--------------------------------

При отсутсвии статистики на противника, можно попытаться "пробить" характер противника.

Т.е к примеру играть 20 (ну или какое то определенное число) рук в характере полного маньяка - постоянно рейзим. Таким образом можно определить насколько тайтово играет противник, насколько можно его "запугать"

Затем играем 20-40 рук в полном тайте - играем только пары или овер карты. Определяем таким образом агрессивность противника

Затем играем в нормальном стиле (что бы это не было :)

Смотрим во всех трех случаях собранную статистику VPIP, PFR, AF, WSD - делаем выводы
Если сидишь на SB и делаешь рейз, то это идет в VPIP 

А в остальном все упирается в чистую статистику. При наличии достаточного количества сыгранных рук, можно довольно точно спрогнозировать поведение противника.

***

VPIP - voluntary put $ in the pot (%) - процент рук, когда игрок делал ставку на префлопе. Здесь все его call & raise, но нет check на BB и fold на SB
Это важный показатель, делящий игроков на лузовых и тайтовых
у хороших игроков VPIP не превышет 25%. По этому показателю сразу видно с чем человек играет. Чем меньше этот показатель, тем с лучшими картами игрок входит в игру 

PFR - preflop raise (%) - процент рук, когда игрок делал raise или re-raise до флопа
второй по важности параметр, делящий игроков на пассивных и агрессивных
Адекватное значение в районе 7-13%. Рейз от игрока с низким PFR значит что у него что-то реальное, типа старшей пары или AK. Высокий PFR в сочетании с высоким VPIP указывает на маньяка. 

AF - agression factor - определяется как (% bet + % raise) / % call
Это, третий по важности параметр, позволяющий оценить агрессивность игрока, начиная с флопа
Средний фактор агрессии на флопе и терне 3 (диапазон 2-4), на ривере ниже - 2 (1,5-2,5)

WSD - went to showdown (%) - процент сдач, в которых игрок смотрел флоп и дошел до вскрытия
Еще одна важная характеристика, позволяет оценить лузовость/тайтовость противника после префлопа
Средняя величина - 32%, диапазон 27-38%. По величине WSD лучше всего можно определить “сопротивляемость” блефу. Игрок с высоким WSD (так называемый “колинг стейшн”) будет отвечать со своей младшей парой или даже голым тузом до упора, блеф становится бессмысленным. Игроки с низким значением на опасном флопе они могут сбросить любую карту, кроме натса, против них блеф наиболее эффективен.

Указанные выше цифры - для длинных столов.
Для столов 6 max картина должна быть примерно следующая:
VPIP 23-25%,
PFR 14-16%, при желании можно играть чуть тайтовее, но соотношение между VPIP и PFR так и должно оставаться чуть больше чем 2:1 (например, 22% и 12%).
AF на флопе и торне должен быть порядка 2,5-3,5, на ривере - 1,5-2,5
WSD в пределах 35-38%.


>VPIP
при игре один-на-один такой фишки нет :)

есть. Если сидишь на SB и делаешь рейз, то это идет в VPIP

--------

Почему вы решили использовать только самые простые параметры типа VPIP, AF, WtSD? я бы наделил бота более серьезными анализаторными характеристиками а именно:

Preflop-статистика:

- VP$IP: значение VP$IP показывает, сколько процентов своих рук игрок действительно играет. С его помощью можно узнать, к какой категории игроков относится противник. Показатель VP$IP должен быть 13-20% на полных столах с 7-10 игроками (Full-Ring, FR) и достигать 17-23% на коротких столах с 5-6 игроками (Shorthanded, SH).

- PFR: Preflop Raise показывает, сколько процентов своих рук соперник рейзит на префлопе.

Соотношение между показателями VP$IP и PFR является важным для нашей собственной игры. А именно: значение PFR всегда должно быть константным по отношению к VP$IP и составлять примерно 2/3 от VP$IP. Например если у нас VP$IP между 13 и 20% при игре за полным столом (FR), то PFR должен быть между 8 и 14%. В игре за короткими столами соответственно он должен быть 11-16%.

- Cold Call Preflop: как часто соперник вступает в руку, коллируя чужой рейз. Если значение этого показателя соперника превышает 5%, то надо осторожно действовать против него после флопа, потому что ему трудно сбросить свою руку.

- Folded Small Blind to Steal: как часто игрок, находясь на позиции Small Blind (SB), сбрасывает свою руку в ответ на попытку украсть блайнды. Значение этого показателя в нашей игре должно составлять примерно 85%. Если вы хотите защитить свой SB, тогда вы должны в ответ сделать ставку в три раза большую чем соперник и тем самым удержать инициативу.

-Folded Big Blind to Steal: по аналогии к предыдущему показателю, указывает, как часто игрок, находясь на позиции BB, сбрасывает свою руку в ответ на попытку украсть блайнды. Значение этого показателя в нашей игре должно составлять примерно 70%. Очень важно не стараться защищать свой ВВ со слабыми руками. 


Postflop-статистика

- Continuation Bet: как часто соперник делает продолженную ставку на флопе (continuation bet), если он повысил на префлопе.

- Calls Continuation Bet / Raises Continuation Bet / Folds Continuation Bet: эти показатели очень важны для нашей собственной игры. Если соперник имеет большое значение Calls Continuation Bet, тогда не стоит делать против него продолженную ставку, так как он скорее всего её уравняет. Также стоит принять во внимание, если кто-нибудь часто поднимает в ответ на продолженную ставку (Raises Continuation Bet). При игре один-на-один против соперника с высоким показателем Folds Continuation Bet, можно, наоборот, чаще использовать продолженную ставку и выигрывать таким образом.

- Flop Aggression / Turn Aggression / River Aggression / Total Aggression Postflop (AF): все эти четыре показателя являются важными индикаторами степени агрессивности игрока как в общем, так и в отдельных раундах торговли. Они помогут при принятии решений, как например: стоит ли коллиривать ставку агрессивного игрока или сбросить карты против пассивного.

Обратите внимание: если у соперкика очень высокое значение показателя River Aggression в сравнении с другими (Flop, Turn), то стоит быть начеку на ривере, так как оппонент склонен к тому, медленно разыгрывать очень сильные руки (slowplay).

Total Aggression Postflop не должен превышать 3.5. Значение Flop Aggression должно находиться между 2.5 и 4.5. Если оно составляет больше, чем 4.5, то вам иногда надо отказываться от ставки на флопе со слабой рукой. Показатель River Aggression должен находиться в пределах между 1.0 и 2.5. Если он меньше, то вы часто теряете вэлью и долгосрочно будете иметь меньше выигрыша.

- Bet Flop / Bet Turn / Bet River / Bet Total: Если какой-нибудь игрок очень часто делает ставки, то это значит, что он играет не только свои сильные руки, но также и слабые. Если же он редко ставит, то он скорее всего пассивный и осторожный игрок, который не может решиться сделать ставку, имея хорошую руку.

- Check Raise Flop / Check Raise Turn / Check Raise River / Check Raise Total: самый важный показатель из этих четырёх - Check Raise Flop, так как если у соперника высокое значение этого показателя, то лучше отказаться от продолженной ставки (continuation bet) на флопе. Если у нас очень сильная рука на терне и мы не боимся предоставить сопернику возможность бесплатно увидеть следующюю карту, тогда мы можем сыграть check/raise на терне. В отличие от терна, check/raise на ривере связан с большим риском, так как у соперника появляется шанс увидеть шоудаун бесплатно.

Значение вашего показателя Check Raise Total не должно превышать 1%, так как иначе вы теряете вэлью.

- Raise Flop / Raise Turn / Raise River / Raise Total

- Folded to Flop Bet: если у кого-нибудь из ваших соперников значения этого показателя выше среднестатистического, тогда может быть выгодным, имея слабую пару или хороший дро, сделать ставку и тем самым полублефовать, если на флопе ещё никто не вступил в игру.

- Folded to Turn Bet: иногда встречаются соперники с явно низким значением Folded to Flop Bet, но которые много сбрасываются на терне (высокий Folded to Turn Bet). В таком случае имеет смысл, при наличии у нас флеш-дро или топ пары с хорошим кикером (Top Pair/Good Kicker, TPGK) и борде, на котором возможны дро, сделать вторую ставку на терне, чтобы выиграть руку, не доходя до шоудауна.

Игроки, которые редко сбрасывают свои карты на терне, чаще всего также редко сбрасывают на ривере и поэтому против них стоит меньше блефовать.

- Folded to River Bet: если наш соперник редко сбрасывает свою руку в ответ на ставку на ривере, тогда можно, при наличии сильной руки, сделать большую ставку, чем обычно. В том случае, если кто-то, наоборот, часто сбрасывается на ривере, можно чаще блефовать и тем самым больше выигрывать. 

Некоторые игроки чрезмерно много коллируют на флопе и терне и затем сбрасываются на ривере. В такой ситуации можно сделать, так называемую 3rd Barrel Bluff ставку. Однако такой ход связан с большой долей риска

- Went to Showdown: WTS тесно связан с тремя, только-что представленными, показателями Folded to .... При игре против соперника с высоким значением WTS надо полностью отказаться от блефа и играть, в основном, только ваши сильные руки, так как соперник готов заплатить много денег. Также не стоит чрезмерно агрессивно играть дро против таких соперников, потому что они редко сбрасывают карты.

Банк в анлиме очень важен - ситуация типичная: опп (TAG) из EP делает рейз 4ББ, его стек 100ББ, все жмут фолд, мы на баттоне у нас тоже 100ББ - у нас карманные 77, мы знаем что игрок тайт и из ранней позиции делать рейз будет только с очень сильными руками (например JJ+, AQs+, AKo) согласно этого спектра наши оддсы на выигрыш 7.5:1, взглянем на потоддсы - они где-то 1.30:1 , текущих потоддсов очень сильно не хватает для колла, но смотрим ситуацию после флопа -
1) 89% - мы не усилились в ответ на ставку соперника - фолд.
2) 10% мы усилились, если у соперника действительно сильная рука, то с ней он будет активно ставить и до ривера в среднем поставит 40ББ,
3) 1% Мы усилились, но соперник усилился тоже до старшего сета или лучше, здесь скорее всего мы проиграем 40ББ.
проверим  достаточно ли этого - текущая ставка 4ББ - предполагаемый средний выигрыш в случае усиления - 0.90*40 (сет выиграет в 90% случаев) ББ, средний проигрыш в случае усиления нас обоих - 0.1 * 40 ББ (сет проиграет против старшего сета или лучше в 10% случаев) тем самым предполагаемые винпотоддсы составляют 36ББ - 4ББ = 32:4 (плата за колл) или 8:1, что немного лучше чем 7.5:1 - можно коллировать
А вот если бы у нас или соперника было бы стек скажем в 20ББ, то сам видишь: 5:1 это фолд ани колл.

--------

У ПТ в базе есть такие поля

pre_flop_raise
flop_raise
flop_ck_raise
turn_bet_raise
turn_bet_ck_raise
river_bet_raise
river_bet_ck_raise

а так же типа

preflop_call
preflop_raise
preflop_flop
preblop_bet  и т.д

на каждого игрока, игру, сессию.

---

бот для каждой возможной руки соперника счиатет коэфициент правдоподобия, т.е. насколько похоже, что имея такую руку, соперник бы стал так торговаться. И при оценке силы своей руки он при моделировании по Монте-Карло выбирает руки соперника не с одинаковой вероятностью, а в соответствии с их коэф. правдоподобия. Правда, для оценки коэф. правдоподобия для каждой возможной руки пришлось ограничиться всего 6 симуляциями, т.к. если сделать больше, то возникала угроза, что бот может проиграть по времени.
А для оценки силы собственной руки проводится 1000 симуляций.

Я сделал бот, который делает ставки прямо пропорционально вероятности выигрыша. я не вводил угадывание карт соперника, так что он считает, что все руки соперника равновероятны
Второй бот играет по заманивающей стратегии. На первых кругах торговли делает случайные ставки от нуля до той величины, которую поставил бы первый бот, а после ривера делает ту же ставку, что и первый бот (по-типу считает, что уже заманил и теперь можно требовать по максимуму).

Таким простым ботам явно ничего не светит против нормальных противников.

Например, вот как я понимаю идеалогию один-на-один:
- делаем рейз, если считаем нашу руку сильнее руки противника, иначе, если возможно, чек;
- делаем колл, если считаем свою руку хуже, но все же пот-оддсы (с учетом того, что соперник в дальнейшем может вынудить еще коллировать его ставки) выгодные для колла;
- сбрасываем, если пот-оддсы невыгодны
Так играют мои два турнирных бота.

В этой идеалогии не хватает только стратегии чек-рейза: если мы считаем, что соперник в большинстве случаев (если мы сделаем чек) сделает ставку, причем в большинстве из этих случаев наши карты окажутся сильнее карт соперника, то делаем чек, а на рейз отвечаем ререйзом.
Пока структура ботов не позволяет сколь-нибудь приемлемо втолковать ему эту хитрость.

Ах, да! Еще забыл про блеф :)
Итак, если мы считаем, что на нашу ставку противник сбросит некоторые руки и их количество таково, что

    пот * вероятность_сброса - ставка   >  (пот + 2*ставка) * вероятность_выигрыша

то блефуем. Для такой игры надо угадывать карты соперника и поэтому в моих ботах я это пока и не пытался делать.

>>> НС на 8 гБ просто не успевала бы считать :) Там просто заранее просчитаны все возможные игровые ситуации для префлопа и флопа. Ривер и терн расчитываются на ходу. 


===========

На префлопе работают префлоп-таблицы.

А дальше простая логика

else if(handValue >= twoPairsHand)
        {
          if(gameInfo.pairCount == 2)
          {
            if(gameInfo.cicleBet == 0)
            {
              check();
            }
            else
            {
              call();
            }
          }
          else if(gameInfo.pairCount == 1)
          {
            if(gameInfo.cicleBet == 0)
            {
              bet();
            }
            else
            {
              call();
            }
          }
          else
          {
            if(gameInfo.cicleBet == 0)
            {
              bet();
            }
            else
            {
              if(gameInfo.raiseCount  > 0)
              {
                raise();
              }
              else
              {
                call();
              }
            }
          }
        }

Статы не учитываются, действия принимаются исходя из текущих карт у игрока и карт на столе.

---------

расмотрим хеадс-ап безлимит..

1. два игрока. руководствуясь своими внутренними мыслями,  делают действия в зависимости от игровой ситуации. (действия не обязательно однозначные в каждой игровой ситуации.. к примеру игрок думает типа а вот тут я в 30% скажу пас а в 50% райзану полбанка а в 20% проколю.. типа чтобы запутать соперника

2. Теперь самое главное.. вот есть некая игровая ситуация.. к примеру ривер .. мы знаем свои катры и игровую ситуацию (история торгов, карты на доске и тп) .. мы НЕ знаем две вещи
     1. карты противника
     2. что он с этими картами решит сделать в ответ на наш ход.
Если бы мы знали это наверняка, то безусловно приняли бы оптимальное решение. мало того .. если бы мы знали это хоть примерно .. мы бы приняли тоже ОПТИМАЛЬНОЕ решение, основанное на нашей МОДЕЛИ СОПЕРНИКА.  да да .. именно .. это слово прозвучало .. и это ключ к пониманию .. если у нас есть модель соперника то он повержен .. тупо математически высчитывается АНТИМОДЕЛЬ которая его в хвост и в гриву

Вот тут то и становится понятным зачем при одной и той же игровой ситуации делать разные ходы (хотя ведь безусловно наше матожидание от хода для разных ходов не одинаковое и мы принимаем заведомо неоптимальное решение) .. да потому что покер - это игра "скрой или меняй свою стратегию, при этом не забывай выигрывать". и как показала практика - к хеадс-апу оч трудно применять статистику .. все предистории и оценка тактики игрока влияют оч сильно на принятие игровых решений


---------

Рассмотрим упрощенный вариант: каждый игрок может до флопа либо пойти all-in, либо сбросить карты. Стек первого игрока X, стек второго игрока Y, малый блайнд s, большой, соотвественно 2*s, первым принимает решение первый игрок. Стратегия игрока в данном случае - диапазон (набор) сданных ему карманных карт (2 штуки), с которыми он принимает решение all-in. Я буду утверждать, что  равновесия по Нэшу, а следовательно и оптимальных стратегий не существует. Одно дело - какие-то базовые стратегии, применяемые игроками на практике, другое дело - использование фундаментального подхода (теория игр) для получения математически выверенных оптимальных стратегий. Если говорить о боттинге, то, несомненно, с помощью АВС-стратегий боты могут бить невысокие лимиты, но здесь совсем другие подводные камни

---


Берем все возможные стратегии первого игрока, и помещаем их по горизонтали,
берем все возможные стратегии второго игрока, и помещаем по вертикали.
Выводим в матрицу цену игры для каждого сочетания стратегий.
Получаем матрицу матричной игры двух соперников...

Вам доказать что число стратегий в Покере конечно? что такое стратегия? Стратегия - это таблица в которой для каждой игровой ситуации (сочетания карт на руках, пордок выкладки карт на стол, предшествующая торговля) проставлена конкретная заявка игрока. Раз число карт конечно, торговля ограничена - то и число игровых ситуаций ограничено. Раз число игровых ситуаций ограничено - значит и число стратегий ограничено.

А вообще есть известная теорема теории игр о последовательных играх с неполной информацией с конечным числом шагов - о том что они сводятся к матричным играм. Однако я не представляю каким образом можно свести к матричной игре покер в общем виде, когда у нас 4 улицы торговли,  и возможность принимать решение каждом игроком на каждой улице по несколько раз.  Совершенно не исключаю, что это возможно теоретически, но совершенно не реализуемо на практике из-за невероятно большого количества вариантов развития событий.

Практически - конечно матрицу не построить, она чудовищных размеров. Но ввиду того что покер ТЕОРЕТИЧЕСКИ сводится к матричным играм - существует его решение в смешанных стратегиях. А это говорит о том что нет никакой психологии в покере - есть алгоритм беспроигрышный (оптимальная смешанная стратегия), и например блеф в покере - это просто ненулевая вероятность хорошей заявки при плохой карте. И конечно же оптимальная стратегия не зависит от стратегии соперника. Но чтоб выигрывать больше у слабого соперника не нужно придерживаться оптимальной стратегии, а нужно использовать недостатки стратегии СЛАБОГО соперника

Насколько я знаю, оптимальная стратегия - рассчет на совершенную игру оппонента - т.е. что он не допускает ошибок. Если игрок допускает ошибки, то оптимальная стратегия в строгом определении, не действует оптимально, а действительно оптимальной будет та, которая использует эти слабости оппонента, она рассчитывается значительно сложнее. В покере не делать ошибок - значит прослеживать дерево игры (совершенной игры) до самых листьев, что в реальном времени невозможно. Но возможен предрасчет, и то, на основе редуцированного дерева (что исследователи по ИИ в покере называют абстракцией (abstraction)), который занимает не один день на современной персоналке. Реализованная таким образом стратегия также не оптимальна, т.к. дерево абстрагировано, и она называется псевдо-оптимальной. Проблемы: насколько использование абстракции искажает оптимальную стратегию. Кроме того - таким образом полученная стратегия является статической.

Возьмём к примеру игру камень ножницы бумага... это игра? о да... имеет ли она оптимальную стратегию - безусловно.. оптимальная стратегия сдесь это смешаная стратегия 33% камень 33% ножницы 33% бумага несмотря на всю свою оптимальность с математической точки зрения - выигрыш будет = 0. притом независимо от стратегии противника. Теперь усложним игру.. добавим рейк 3% с каждой игры :) И наша прошлая оптимальная стратегия превращается в убыточную! А единственная оптимальная стратегия - не играть! Теперь ещё усложним задачу... я к примеру подметил что определённые игроки в силу своих какихто религиозных убеждений предпочитают реже использовать ножницы в игре. Подметив этот факт я могу написать бота используешего эту информацию. к примеру 50% камень 30% ножницы 20% бумага. Он будет выигшрышный несмотря на всю свою математическую неоптимальность. И я буду его использовать втихаря до тех пор пока он будет работать (пока те которым вера не позволяла использовать ножницы либо не разорятся либо не изменят стратегнию). 


--------

Задача 1.
Есть массив ячеек, каждая из которых соответствует одной паре карт из всех возможных двухкарточных комбинаций, т.о. это массив из 1326 ячеек (колода стандартная).
В этих ячейках хранятся вероятности того, что соответствующая пара карт сейчас у оппонента.
После каждого игрового хода оппонента я произвожу обновление вероятностей карт (вероятностный вывод).
Упрощенно это обновление выглядит как P[j] = P[j] * kj, где P[j] - ячейка вероятности, kj - множитель-коэффициент обновления для данной пары карт. Т.о. нужно для обновления получить доступ к каждой ячейке. Причем какие-то из ячеек станут =0, в зависимости от текущих deadCards (карты у меня в  руке и карты борда), которые сокращают число возможных комбинаций оппонента.

Задача 2.
Вычислить силу руки, но инкрементируя переменные behind, tied, ahead не единицами, а вероятностями карт (как описано в The challenge of poker), т.е. значениями того самого массива P, который мы вычислили на предыдущем этапе. 

===========

> В корне неправильное видиние игры... это в шахматах так... в покере же нет никаких деревьев.. есть стратегии. в том же
> камень ножницы бумага? о каком дереве идёт речь? покер всего лишь чуть сложнее.
  Речь идет о дереве с неполной информацией, которое наравне с узлами MIN, MAX (как в шахматах) содержит узлы жеребьевки или узлы шанса. Узлы шанса представляют вероятностные исходы в игре с неполной информацией. Что в покере мы отнесем к неполной информации (подводя покер под математическую модель):
1 -- скрытые карты оппонентов;
2 -- выбор действий оппонентом или, по-иному, результат разворачивания торговли оппонентами, после того, как мы выбрали свое действие;
3 -- следующие карты которые придут на борд.
  Последние два пункта не относятся к настоящему а к будущему, поэтому это можно считать неполной информацией другого характера. К неполной информации конкретно можно отнести только неполноту информации  о текущем состоянии, т.е. скрытые карты оппонентов.
  Для техасского холд'ема с 2мя игроками узлами шанса будут:
1: узел раздачи карт
2: каждый второй полуход (оппонента), где идет ярус узлов, в которых оппонент принимает решение: мы не знаем что выпадет у оппонента, в первую очередь из-за неизвестности его карт, а он еще может блефовать...
3: узел выбрасывания новых общих карт на борд - идет после ярусов узлов торговли
-- корневой узел шанса почкуется на все возможные сочетания наших карт и карт оппонента (или наоборот) на префлопе: С(52,2)*C(50,2)=1624350;
-- узлы шанса выброса флопа - на все возможные сочетания карт флопа C(48,3)=17296;
-- узлы шанса выброса терна -  все возможные карты терна C(45,1)=45;
-- узлы шанса выброса ривера - все возможные оставшиеся карты ривера C(44,1)=44.
  Эти цифирки собственно - коэффициент ветвления узлов шанса (не слабый).
Узлы Min, Max называются узлами принятия решения. Т.о., как оценивают в The challenge of poker, дерево игры в техасском холд'еме составляет 10^18 узлов (!).
  В случае 2х игроков узел описывается полезностью в виде числа (т.к. полезности в игре с 0й суммой противоположны). Когда игроков больше 2х, описывается вектором полезности как и в обычном дереве.
  По-сути, в покере все узлы, кроме узлов, в которых мы принимаем решение, являются узлами шанса. Это и есть состояния игры. Мы переходим из состояния в состояние, принимая решение. Приняв решение, происходит цепь событий: мы двигаемся в дереве и проходим узлы принятия решения оппонентами, на пути встречаем узлы выпадения карт борда... Все это ведет к новому состоянию, в котором мы снова должны принимать решение, если игра еще не закончилась... Если же она закончилась - мы в терминальном состоянии. Терминальное состояние в дереве покера - это вскрытие, здесь мы получаем значение полезности, соответствующую всей последовательности выполненных нами действий за игру. Обычно в теории игр для этого используется функция полезности. В покере только в терминальном состоянии мы узнаем окончательную полезность, в остальных состояниях поступают наблюдаемые вознаграждения. Это и затрудняет прямое применение алгоритмов контролируемого обучения (обучения с учителем) для аппроксимации функции полезностей - слишком мало примеров и они слишком поздно поступают...
  В общем случае, главные отличия дерева с неполной информацией от детерминированного дерева:
1 -- Переход в дереве описывается моделью перехода и восприятия.
Мы можем "двигаться в один узел, а попасть совсем в другой" (в общем случае) - это как в примере из Норвига и Рассела в разделе о задачах с последовательным принятием решений: среда 4x3 с таблицей вероятностей перехода из квадрата в квадрат: выполняемое из начального квадрата (1,1) действие Up перемещает агента в квадрат (1,2) с вероятностью 0.8, но с вероятностью 0.1 он движется вправо, в квадрат (2,1), а с вероятностью 0.1 - влево, ударяется о стену и остается в квадрате (1,1). В теории принятия решения такая среда описывается марковским процессом принятия решения (Markov Decision Process - MDP).
2 -- мы никогда точно не знаем в каком узле принятия решения мы находимся в данный момент, чтобы принять соответствующее решение (фолд, колл, рейз).
  В итоге для описания процесса принятия решения в покере наиболее подходит модель марковского процесса принятия решения в частично наблюдаемой среде (Partially Observable MDP) [Норвиг-Рассел, С.831-839]. Она в добавок к модели перехода MDP добавляет доверительные состояния и модель восприятия. Каждый переход из состояния i в состояние j происходит с некоторой вероятностью p(i,a,j) от предпринятого действия a и сопровождается наблюдаемым новым состоянием j, наблюдаемым вознаграждением (или мгновенной стоимостью перехода) g(i,a,j) и результатами восприятия e(i,a). Неполное знание о текущем состоянии имеет математическую модель доверительного состояния - абстракции над всеми возможными состояниями среды, представляющей собой точку в пространстве вероятностей по всем состояниям. Функция доверительного состояния представляет собой закон распределения вероятностей по всем возможным состояниям среды. В среде, описываемой с помощью доверительного состояния не рассматриваются конкретные состояния. Каждое состояние может быть и тем и другим и третим..., с некоторой вероятностью. Нам неизвестно текущее состояние среды, а известна его абстракция.
  Оптимальная стратегия, как и в играх с полной информацией опирается на совершенную игру оппонента. Это по-сути тот же минимаксный алгоритм только в условиях неполной информации, - таким же образом производится резервирование значений полезности действий от некоторого горизонта к корню, но при этом полезность узлов жеребьевки усреняется по всем возможным результирующим состояниям. Это называется "усреднение по прогнозам". Т.о. полезости состояний здесь не детерминированные а ожидаемые. Т.к. это минимаксный алгоритм, для него применим альфа-бета отсечения, но при условии, что мы можем определить пределы функции полезности в каждом узле шанса [Норвиг-Рассел, С.261,262].
  Характерные минимаксные алгоритмы для MDP - алгоритм итерации по значениям и итерации по стратегиям. Однако для покера они не годятся в исходном виде, т.к. требуют по уравнению для каждого состояния + состояний, как мы помним, нет в покере - есть их абстракции, и пространство этих состояний непрерывно (вероятности), в отличие от дискретного пространства S физических состояний. Притом для итерации по значениям эта система уравнений нелинейная, что не позволяет применить обычные методы линейной алгебры. Но конечно не должно значить, что описание покера в такой модели бессмысленно, т.к. существуют хитрости, которые опытным исследователям известны и они обходят все перечисленные проблемы, модифицируя стандартные методы.
  Что касается смешанной стратегии в покере, это отдельная тема, но смешанная стратегия также может находиться по этому же дереву, рассматривая последовательности ответов оппонентов на наше каждое действие с присвоенной ему вероятностью и результат каждой этой последовательности - вероятностыный результат (гиперплоскость в пространстве вероятностей наших действий). Но для этого сначала применяют методы абстракции дерева игры, чтобы задача линейного программирования оказывалась приемлемой по размеру. При этом задача ЛП становится разрешимой даже в реальном времени. Т.е. компьютерный игрок получает аппроксимацию оптимальной смешанной стратегии на ходу, применяя ее как базовую линию поведения.

  Все это конечно формальное описание. Игра представляется в виде дерева, подводится под обкатанные модели, чтобы можно было применять известные методы и подходы, накопленные из таких игр как шахматы и т.д.

---

В камень ножницы бумага я так понимаю игра 33/33/33 рассчитана, что все оппоненты играют 33/33/33 - тогда дается гарантия что мы не проиграем вообще. Если же оппоненты отклоняются от 33/33/33 мы еще и выиграем +. {Здесь оговорился. На самом деле действительно, независимо от того, что оппонент будет делать, оптимальная смешанная стратегия не даст нам ни плюса ни минуса, т.к. мы находимся в этом случае в равновесии - точке пересечения плоскостей результатов, которая составляет для нас нулевую полезность. При этом какую бы стратегию (плоскость результатов) ни выбрал оппонент, результат не будет для нас больше нуля.}

Дерево здесь такое:
уровень 1: корень - узел принятия решения, в котором мы можем сделать выбор из трех вариантов;
уровень 2: по узлу шанса для каждого решения: для "камень", для "ножницы" и для "бумага";
уровень 3: узлы шанса разветвляются на 3 действия оппонента (если оппонентов больше одного, то на возможные сочетания действий оппонентов, которых будет 3^n_players, то есть как размещений с учетом повторения элементов. На данном уровне имеем 3^n_players узлов принятия решения;
уровень 4: узлы принятия решения разветвляются по 3 узла шанса на каждый узел.
...
Такое дерево бесконечно если мы не рассматриваем условий достижения терминального состояния.


---

На ривере только 2 809 475 760 возможных комбинаций карт, которые мы можем увидеть у себя и на столе. А еще для каждой из этих комбинаций нужно учесть всю торговлю начиная от префлопа. Чтобы просто записать настоящую оптимальную стратегию просто не хватит емкости жестких дисков.

Имеет смысл искать только сильно упрощенные стратегии. Насколько они будут близко к оптимальной зависит от того, как удачно мы сделаем упрощения.
Поэтому прежде чем говорить о нахождении оптимальной стратегии нужно пояснить какие именно упрощения игры ты предлагаешь.


> Так и не понял, как ты предлагаешь строить стратегию антибота. Путем случайного
> изменения параметров текущей лучшей стратегии? Тогда какие гарантии, что не
> попадешь в точку локального экстремума, когда любое малое изменение стратегии
> дает результат хуже, но стратегия не является глобально оптимальной?

Это два совершенно разных действия "нахождение несмешаного антибота" и "нахождение оптимальной стратегии"

Про локальные оптимальные стратегии - думаю это не грозит системе нахождения описанной выше. Так как мы НЕ "случайно меняем параметры", а находим НЕСМЕШАНОГО антибота. Что означает его несмешаность в филосовском плане? Зачем вообще нам искать смешаную оптимальную стратегию? Ведь казалось бы какую бы модель мира мы не использовали ВСЕГДА при выборе хода мы оцениваем мат ожидание прибыли. И логично выбрать ход с максимальным мат ожиданием! НО НЕТ! мы жертвуем сиюминутной прибылью! осознанно! и ходим случайно с заданным распределением. ЗАЧЕМ? А затем, что мы ШИФРУЕМСЯ таким образом от противника и не даём ему возможность под нас подстроится. Так вот когда мы высчитываем несмешаного антибота против нашего смешаного ... У несмешаного ОГРОМНАЯ фора: ему не надо шифроватся. никто не собирается под него подстраиватся. Это как два гладиатора - один с шитом, а другой - с мечём :) мы совершенствуем щит до тех пор, пока он станет неуязвим против ЛЮБОГО меча! тут нет места локальным экстремумам

